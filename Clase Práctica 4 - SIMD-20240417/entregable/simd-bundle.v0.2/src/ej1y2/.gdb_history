ni
q
b dot_product_sum:20
b dot_product_sum
make main
break dot_product_
break dot_product_sum
q
file main
b dot_product_sum
b dot_product_sum:
b dot_product_sum:.ciclo
b dot_product_sum:
b dot_product_sum
ls
l
l
b .debug
break .debug:20
break dot_product_asm[ciclo]
break checkpoint2.asm
q
info breakpoints 
break dot_product_asm
run
ni
make main
q
b dot_product_asm
r
ni
make main
ni
q
b dot_product_sum
b dot_product_asm
r
ni
print %xmm8.v4_int32
print %xmm8.v4_int32
print %xmm8
p %xmm8
print help
help print
inspect %xmm8
print %rax
cls
ni
q
b dot_product_asm
r
ni
exit
file checkpoint2_asm.o
print {uint8_t*} shuffle_mask 
print {uint8_t**} shuffle_mask 
print {uint8_t*} shuffle_mask@10 
print {int*} shuffle_mask@10 
print {int*} shuffle_mask@10 
help x
x/db shuffle_mask 
x/db *(uint8_t) shuffle_mask 
x/db *(uint8_t*) shuffle_mask 
x/db  shuffle_mask 
x/hb  shuffle_mask 
x/h  shuffle_mask 
x/db mask_h1
b four_of_a_kind_asm
r
make main
make all
make all
make tester
q
b four_of_a_kind_
b four_of_a_kind_asm
r
x/ shuffle_mask
x/db  shuffle_mask
x/1uw shuffle_mask
x/1uw mask_h1
x/1w shuffle_mask
make main
x/1w shuffle_mask
p {uint_8} shuffle_mask
p {uint_8*} shuffle_mask
p *{uint_8*} shuffle_mask
x/1w &shuffle_data
x/1w &shuffle_mask
help x
x/4b &shuffle_mask
x/4b &mask_1
x/4b &mask_h1
make main
x/16b &mask_h1
make main
x/16b &wipe_suit
make main
q
file checkpoint2_asm.o
x/16b &wipe_suit
help x
x/b &wipe_suit
x/16tb &wipe_suit
make main
x/16tw  &wipe_suit
x/4tw  &count_hands
x/4tw  &count_hands
q
file checkpoint2_asm.o
b four_of_a_kind_asm
r
q
info breakpoints 
b four_of_a_kind_asm
r
x/4tw &count_hands
make main
q
file tester
file tester.o
make test
make tester
file tester
b four_of_a_kind_asm
r
help x
x/1tw &wipe_suit
x/1tw &count_hands 
make main
make tester
x/1tw &count_hands 
q
b four_of_a_kind_asm
x/1tw &count_hands 
x/4tw &count_hands 
help x
x/4xw &count_hands 
x/4dw &count_hands 
q
b four_of_a_kind_asm
r
x/4tb &shuffle_h1
make tester
q
main tester
make tester
file tester
b four_of_a_kind_asm
r
x/16tb $count_hands 
x/16tb $count_hands 
help x
x/16xb $count_hands 
x/16xb $shuffle_h1 
q
q
file 
file checkpoint2_asm.o
print shuffle_mask 
print *(uint8_t*0) shuffle_mask 
print *(uint8_t*) shuffle_mask 
print *(uint16_t*) shuffle_mask 
print *(uint8_t*) $shuffle_mask 
p/x shuffle_mask 
p/xb shuffle_mask 
help print 
p {uint8_t} shuffle_mask 
print {uint8_t} shuffle_mask 
file tester
info breakpoints 
b four_of_a_kind_asm
r
x/1tb $count_hands 
file tester
b four_of_a_kind_asm
r
print $xmm8
help x
x/1tb $count_hands 
x/1tb $wipe_suit 
x/4tb $wipe_suit 
x/4tb wipe_suit 
x/4tb $wipe_suit 
x/ $wipe_suit 
x/ $shuffle_h1
q
b four_of_a_kind_asm
r
x/16tb $count_hands
x/16tb $wipe_suit
ni
x/16tb $wipe_suit
q
b four_of_a_kind_asm
r
ni
q
b four_of_a_kind_asm
r
x/1tb $wipe_suit 
x/ $rsp
x/ $rax
x/ $eax
x/tb $eax
x/tw $eax
x/xw $eax
x/16xb $count_hands
x/16xb count_hands
x/16xb $count_hands
x/16tb $count_hands
x/16cb $count_hands
x/16cb &count_hands
x/16tb &count_hands
x/16hb &count_hands
x/16db &count_hands
x/16tb &wipe_suit
x/16db &wipe_suit
q
b dot_product_asm[.ciclo]
b dot_product_asm[ciclo]
b dot_product_asm
r
ni
b .sum
b dot_product:.sum
b dot_product_asm:sum
b dot_product_asm:.sum
b dot_product_asm:49
c
ni
exit
info breakpoints 
b four_of_a_kind_asm
r
ni
r
x/16tb &wipe_suit 
q
q
b four_of_a_kind_asm
r
ni
ni
ni
ni
ni
ni
ni
ni
ni
ni
ni
ni
q
q
